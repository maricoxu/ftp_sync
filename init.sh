#!/bin/sh

CURPATH=$(cd $(dirname $0); pwd)
FTP_USER="ftpuser"
FTP_PASS="ftp123"
FTP_HOME="/home/Code" # This is where files will be synced, and ftpuser's home

echo "--- Ensuring FTP user '$FTP_USER' and directory '$FTP_HOME' ---"

# Create FTP_HOME if it doesn't exist
mkdir -p "$FTP_HOME"
echo "Ensured directory $FTP_HOME exists."

# Create ftpuser if it doesn't exist
if ! id -u "$FTP_USER" >/dev/null 2>&1; then
    echo "User '$FTP_USER' does not exist. Creating..."
    useradd "$FTP_USER" -d "$FTP_HOME" -s /sbin/nologin
    if [ $? -eq 0 ]; then
        echo "User '$FTP_USER' created successfully."
    else
        echo "Failed to create user '$FTP_USER'. Exiting." >&2
        exit 1
    fi
else
    echo "User '$FTP_USER' already exists."
    # Ensure home directory and shell are correctly set if user exists
    usermod -d "$FTP_HOME" -s /sbin/nologin "$FTP_USER"
    echo "Ensured home directory for '$FTP_USER' is '$FTP_HOME' and shell is /sbin/nologin."
fi

# Set password for ftpuser
echo "Setting password for user '$FTP_USER'..."
echo "$FTP_USER:$FTP_PASS" | chpasswd
if [ $? -eq 0 ]; then
    echo "Password for '$FTP_USER' set successfully."
else
    echo "Failed to set password for '$FTP_USER'. Check chpasswd command." >&2
    # Continue, as proftpd might work if password was set manually or previously
fi

# Set ownership and permissions for FTP_HOME
chown "$FTP_USER:$FTP_USER" "$FTP_HOME"
chmod 755 "$FTP_HOME" # Owner rwx, group rx, others rx
echo "Set ownership of $FTP_HOME to $FTP_USER:$FTP_USER and permissions to 755."

# Recursively set ownership and permissions for contents of $FTP_HOME
echo "Recursively setting ownership and permissions for contents of $FTP_HOME to ensure $FTP_USER can manage files..."
# Ensure ftpuser owns all files and subdirectories within FTP_HOME
chown -R "$FTP_USER:$FTP_USER" "$FTP_HOME/"
# Set permissions: ftpuser gets rwx for directories, rw for files.
# For directories: ftpuser rwx, group rx, others rx (755 equivalent for user, restricted for others)
# For files: ftpuser rw-, group r--, others r-- (644 equivalent for user, restricted for others)
# Using u+rwX is a good general approach for the owner.
chmod -R u+rwX "$FTP_HOME/"
# If specific group/other permissions are needed and are different from what u+rwX implies
# for group/other (which it doesn't directly set beyond umask defaults), add them separately.
# For example, to ensure group can read and traverse, and others can traverse (for directories):
# find "$FTP_HOME" -type d -exec chmod g+rx,o+x {} \;
# find "$FTP_HOME" -type f -exec chmod g+r,o+r {} \;
echo "Done setting recursive permissions for $FTP_HOME."

# Ensure the var directory exists for logs and PID file, owned by ftpuser
mkdir -p "$CURPATH/var"
chown -R "$FTP_USER:$FTP_USER" "$CURPATH/var"
echo "Ensured $CURPATH/var exists and is owned by $FTP_USER."

# Also ensure the entire proftpd application directory ($CURPATH) is accessible by ftpuser
# This is important if the SFTP client tries to read/write files within this directory structure,
# e.g., if the local workspace maps to a structure including these scripts/configs.
chown -R "$FTP_USER:$FTP_USER" "$CURPATH"
chmod -R u+rwX,go+rX-w "$CURPATH" # ftpuser gets rwx, group/other get rx (no write for others)
echo "Set ownership of $CURPATH (proftpd directory) to $FTP_USER and adjusted permissions."

echo "
--- Configuring ProFTPD for user '$FTP_USER' ---"
PROCONF_TARGET="$CURPATH/etc/proftpd.conf"

# Overwrite proftpd.conf with a new configuration tailored for ftpuser
# This avoids complex sed operations on a potentially unknown base file.
echo "Generating new $PROCONF_TARGET..."

cat > "$PROCONF_TARGET" << EOF
# proftpd.conf generated by init.sh for user $FTP_USER

ServerName                      "ProFTPD Server for $FTP_USER"
ServerType                      standalone
DefaultServer                   on

Port                            8021
PassivePorts                    8000 8999
UseIPv6                         off
Umask                           022
MaxInstances                    30

# Run ProFTPD processes as $FTP_USER
User                            $FTP_USER
Group                           $FTP_USER

# DefaultRoot is intentionally commented out or omitted.
# Rely on SFTP client's remotePath setting to target $FTP_HOME.
# If DefaultRoot were to be used and chroot worked, it would typically be:
# DefaultRoot                   $FTP_HOME
# or for chrooting to user's home dir (which is $FTP_HOME for $FTP_USER):
# DefaultRoot                   ~

AllowOverwrite                  on
RequireValidShell               off # Crucial for users with /sbin/nologin

# Disable root login via FTP
# RootLogin                       on

# Disable .ftpaccess files (optional, for simplicity)
# AllowOverride                 off

# Authentication: Use system users, not AuthUserFile/AuthGroupFile
# AuthUserFile                    $CURPATH/var/ftpd.passwd
# AuthGroupFile                   $CURPATH/var/ftpd.group

# Disable Anonymous login
# <Anonymous ~>
#   User                        $FTP_USER
#   Group                       $FTP_USER
#   UserAlias                   anonymous ftp
#   MaxClients                  10
#   DisplayLogin                welcome.msg
#   DisplayChdir                .message
#   <Limit WRITE>
#     DenyAll
#   </Limit>
# </Anonymous>

# Paths for PID file and logs - ensure $CURPATH/var is writable by $FTP_USER
PidFile                         $CURPATH/var/proftpd.pid
SystemLog                       $CURPATH/var/proftpd.system.log
TransferLog                     $CURPATH/var/proftpd.transfer.log

# Optional: Add DelayTable if mod_delay is active, to prevent brute-force attacks
# DelayTable                    $CURPATH/var/proftpd.delay

# Optional: Security settings
# Deny SUID/SGID remote bits from being set
# <Limit SITE_CHMOD>
#   DenyAll
# </Limit>

EOF

echo "$PROCONF_TARGET generated successfully."
echo "Configuration Summary for $PROCONF_TARGET:"
echo "  User: $FTP_USER"
echo "  Group: $FTP_USER"
echo "  DefaultRoot: (omitted/commented out)"
echo "  RequireValidShell: off"
echo "  RootLogin: (commented out/disabled)"
echo "  Anonymous Login: (commented out/disabled)"
echo "  AuthUserFile/AuthGroupFile: (commented out/disabled)"

echo "
--- init.sh finished for $FTP_USER setup ---"
echo "Next steps:"
echo "1. Ensure this proftpd directory (with this modified init.sh and scripts)"
echo "   is correctly placed in your Docker container (e.g., under /home/Code/proftpd)."
echo "2. In the container, navigate to this proftpd directory."
echo "3. Run: bash ./init.sh  (This will create $FTP_USER, set password, and generate proftpd.conf)"
echo "4. Then run: bash ./start.sh to start ProFTPD."
echo "5. Update your .vscode/sftp.json with:"
echo "   - username: "$FTP_USER""
echo "   - password: "$FTP_PASS""
echo "   - remotePath: "$FTP_HOME" (or "/" if DefaultRoot ~ were used and worked)"
echo "Important: If ProFTPD fails to start, check $CURPATH/var/proftpd.system.log for errors."
